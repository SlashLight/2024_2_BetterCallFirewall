// Code generated by MockGen. DO NOT EDIT.
// Source: profile.go

// Package profile is a generated GoMock package.
package profile

import (
	context "context"
	reflect "reflect"

	profile_api "github.com/2024_2_BetterCallFirewall/internal/api/grpc/profile_api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProfileServiceClient is a mock of ProfileServiceClient interface.
type MockProfileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceClientMockRecorder
}

// MockProfileServiceClientMockRecorder is the mock recorder for MockProfileServiceClient.
type MockProfileServiceClientMockRecorder struct {
	mock *MockProfileServiceClient
}

// NewMockProfileServiceClient creates a new mock instance.
func NewMockProfileServiceClient(ctrl *gomock.Controller) *MockProfileServiceClient {
	mock := &MockProfileServiceClient{ctrl: ctrl}
	mock.recorder = &MockProfileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceClient) EXPECT() *MockProfileServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProfileServiceClient) Create(ctx context.Context, in *profile_api.CreateRequest, opts ...grpc.CallOption) (*profile_api.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*profile_api.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileServiceClient)(nil).Create), varargs...)
}

// GetFriendsID mocks base method.
func (m *MockProfileServiceClient) GetFriendsID(ctx context.Context, in *profile_api.FriendsRequest, opts ...grpc.CallOption) (*profile_api.FriendsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFriendsID", varargs...)
	ret0, _ := ret[0].(*profile_api.FriendsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsID indicates an expected call of GetFriendsID.
func (mr *MockProfileServiceClientMockRecorder) GetFriendsID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsID", reflect.TypeOf((*MockProfileServiceClient)(nil).GetFriendsID), varargs...)
}

// GetHeader mocks base method.
func (m *MockProfileServiceClient) GetHeader(ctx context.Context, in *profile_api.HeaderRequest, opts ...grpc.CallOption) (*profile_api.HeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeader", varargs...)
	ret0, _ := ret[0].(*profile_api.HeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockProfileServiceClientMockRecorder) GetHeader(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockProfileServiceClient)(nil).GetHeader), varargs...)
}

// GetUserByEmail mocks base method.
func (m *MockProfileServiceClient) GetUserByEmail(ctx context.Context, in *profile_api.GetByEmailRequest, opts ...grpc.CallOption) (*profile_api.GetByEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByEmail", varargs...)
	ret0, _ := ret[0].(*profile_api.GetByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockProfileServiceClientMockRecorder) GetUserByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserByEmail), varargs...)
}
