// Code generated by MockGen. DO NOT EDIT.
// Source: community.go

// Package community is a generated GoMock package.
package community

import (
	context "context"
	reflect "reflect"

	community_api "github.com/2024_2_BetterCallFirewall/internal/api/grpc/community_api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommunityServiceClient is a mock of CommunityServiceClient interface.
type MockCommunityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityServiceClientMockRecorder
}

// MockCommunityServiceClientMockRecorder is the mock recorder for MockCommunityServiceClient.
type MockCommunityServiceClientMockRecorder struct {
	mock *MockCommunityServiceClient
}

// NewMockCommunityServiceClient creates a new mock instance.
func NewMockCommunityServiceClient(ctrl *gomock.Controller) *MockCommunityServiceClient {
	mock := &MockCommunityServiceClient{ctrl: ctrl}
	mock.recorder = &MockCommunityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityServiceClient) EXPECT() *MockCommunityServiceClientMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockCommunityServiceClient) CheckAccess(ctx context.Context, in *community_api.CheckAccessRequest, opts ...grpc.CallOption) (*community_api.CheckAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAccess", varargs...)
	ret0, _ := ret[0].(*community_api.CheckAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockCommunityServiceClientMockRecorder) CheckAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockCommunityServiceClient)(nil).CheckAccess), varargs...)
}

// GetHeader mocks base method.
func (m *MockCommunityServiceClient) GetHeader(ctx context.Context, in *community_api.GetHeaderRequest, opts ...grpc.CallOption) (*community_api.GetHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeader", varargs...)
	ret0, _ := ret[0].(*community_api.GetHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockCommunityServiceClientMockRecorder) GetHeader(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockCommunityServiceClient)(nil).GetHeader), varargs...)
}
