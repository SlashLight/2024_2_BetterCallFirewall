// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package post is a generated GoMock package.
package post

import (
	context "context"
	reflect "reflect"

	post_api "github.com/2024_2_BetterCallFirewall/internal/api/grpc/post_api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPostServiceClient is a mock of PostServiceClient interface.
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient.
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance.
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// GetAuthorsPosts mocks base method.
func (m *MockPostServiceClient) GetAuthorsPosts(ctx context.Context, in *post_api.Request, opts ...grpc.CallOption) (*post_api.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorsPosts", varargs...)
	ret0, _ := ret[0].(*post_api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorsPosts indicates an expected call of GetAuthorsPosts.
func (mr *MockPostServiceClientMockRecorder) GetAuthorsPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorsPosts", reflect.TypeOf((*MockPostServiceClient)(nil).GetAuthorsPosts), varargs...)
}
